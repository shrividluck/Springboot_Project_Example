/**
 * 
 */
/**
 * @author shrividluck
 *
 */
package com.shri.mtts.http;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.shri.mtts.entity.Movie;
import com.shri.mtts.entity.impl.MovieImpl;
import com.shri.mtts.http.entity.HttpMovie;
import com.shri.mtts.service.MovieService;

@RestController
@RequestMapping(value = "/users", produces = MediaType.APPLICATION_JSON_VALUE)
public class MovieResource {
	private Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	private MovieService userService;

	@RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<HttpMovie> createMovie(@RequestBody HttpMovie newMovie) {		
		Movie userToCreate = convert(newMovie);
		logger.info("Create user:" + userToCreate);
		Movie addedMovie = userService.addMovie(userToCreate);
		return new ResponseEntity<>(new HttpMovie(addedMovie), HttpStatus.CREATED);
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.GET)
	public ResponseEntity<HttpMovie> getMovieById(@PathVariable("userId") long userId) {
		logger.info("getting user by id:" + userId);
		Movie user = userService.getMovie(userId);
		return new ResponseEntity<>(new HttpMovie(user), HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<List<HttpMovie>> getMovieSearch(@RequestParam(value="firstName", required=false) String firstName,
			@RequestParam(value="lastName", required=false) String lastName) {
		logger.info("user search firstName=" + firstName + " lastName=" + lastName);
		Iterable<Movie> found = userService.getMovies(firstName, lastName);
		List<HttpMovie> returnList = new ArrayList<>();
		for (Movie user : found) {
			returnList.add(new HttpMovie(user));
		}
		return new ResponseEntity<>(returnList, HttpStatus.OK);
	}

	/**
	 * Not pushing this into business layer. Could be a util as well
	 * 
	 * @param newMovie
	 * @return
	 */
	private Movie convert(HttpMovie httpMovie) {
		MovieImpl user = new MovieImpl();
		user.setFirstName(httpMovie.firstName);
		user.setLastName(httpMovie.lastName);
		user.setPin(httpMovie.pin);
		return user;
	}
}
